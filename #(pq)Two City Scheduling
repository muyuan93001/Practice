//There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].
Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.
  
  public int twoCitySchedCost(int[][] costs) {
	      PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){
	          @Override
	          public int compare(int[] o1, int[] o2){
	              if((o1[0]-o1[1])<(o2[0]-o2[1]))
	                 return -1;
	              else if((o1[0]-o1[1])>(o2[0]-o2[1]))
	                 return 1;
	              else {
	            	  if(o1[0]<o2[0])
	            		  return -1;
	            	  else
	            		  return 1;	            	  
	              }	                  
	            }
	      });
          for(int[] i : costs)
              pq.offer(i);
          int sum = 0;
          for(int i=0;i< costs.length/2;i++) {
             sum+= pq.poll()[0];
          }
          for(int i= costs.length/2; i< costs.length;i++) {
              sum+= pq.poll()[1];
           }
           return sum;
	 }
