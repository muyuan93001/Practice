   // Given an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums. Formally, we can partition the array if we can find indexes i+1 < j with (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])
   public boolean canThreePartsEqualSum(int[] A) {
        int[] temp = new int[A.length];
        boolean oneThree = false;
        boolean twoThree = false;
        int res = 0;        
        for(int i=0;i<A.length;i++){
            res = res + A[i];
            temp[i] = res;
        }
        if(res /3 *3!=res)
            return false;
        int flag = res/3;
        for(int j=0; j<temp.length; j++){
            if(temp[j] == flag)
                oneThree = true;
            if(temp[j] == flag*2 && oneThree)
                twoThree = true;        
        }
        return oneThree && twoThree;
    }
