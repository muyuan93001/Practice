//Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]


public List<String> generateParenthesis(int n) {
        List<String> res = new ArrayList<>();
        char[] c = new char[2*n];
        DFS(n,n,res, c, 0);
        return res;
    }
    
    private void DFS(int left, int right, List<String> res, char[] c, int pos){
        if(pos == c.length){
            res.add(new String(c));
            return;
        }
        if(left>0){
            c[pos] = '(';
            DFS(left-1, right, res, c, pos+1);
        }
        if(right>left){
            c[pos] = ')';
            DFS(left, right-1, res, c, pos+1);
            
        }
            
    }
