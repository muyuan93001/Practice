 //Given a list of strings words representing an English Dictionary, find the longest word in words that can be built one character at a time by other words in words. If there is more than one possible answer, return the longest word with the smallest lexicographical order.

If there is no answer, return the empty string.
Example 1:
Input: 
words = ["w","wo","wor","worl", "world"]
Output: "world"
Explanation: 
The word "world" can be built one character at a time by "w", "wo", "wor", and "worl".
 
 public String longestWord(String[] words) {
	        String result = "";
	        if(words.length==0) return "";
	        Set dic = new HashSet<String>();
	        int maxLen = 0;
	        for(String s : words)
	            dic.add(s);
	         Queue q = new LinkedList<String>();
	        for(char c='a'; c<='z';c++){
	        	if(dic.contains(String.valueOf(c)))
	                q.offer(String.valueOf(c));
	            while(!q.isEmpty()){
	                String temp = (String)q.poll();
	                for(char c1='a';c1<='z';c1++){
	                    if(dic.contains(temp+c1))
	                        q.offer(temp+c1);
	                    else
	                        result = (temp.length()>result.length())?temp:result;
	                }               
	            }    
	        }
	        return result;
	    }
