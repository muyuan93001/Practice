//Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]


public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        
        if(root==null) return res;
        
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> sub = new ArrayList<>();
            for(int i=0;i<size;i++){
                TreeNode temp = q.poll();
                sub.add(temp.val);
                if(temp.left!=null)
                    q.offer(temp.left);
                 if(temp.right!=null)
                    q.offer(temp.right);
            }
            res.add(sub);
        }
        Collections.reverse(res);
        return res;   
    }
