//You are given a data structure of employee information, which includes the employee's unique id, his importance value and his direct subordinates' id.

For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is not direct.

Now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all his subordinates.

public int getImportance(List<Employee> employees, int id) {
        HashMap<Integer, Employee> map = new HashMap<>();
        for(Employee e: employees)
            map.put(e.id, e);
        Set<Integer> visited = new HashSet<>();
        Queue<Integer> q = new LinkedList<>();
        q.offer(id);
        visited.add(id);
        int res = 0;
        while(!q.isEmpty()){
            Employee curr = map.get(q.poll());
            res += curr.importance;
            for(int next : curr.subordinates){
                if(!visited.contains(next)){
                    visited.add(next);
                    q.offer(next);
                }
            }  
        }
        return res;
    }
